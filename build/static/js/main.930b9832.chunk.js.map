{"version":3,"sources":["GlobalStyle.js","images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","API.js","helpers.js","hooks/useHomeFetch.js","images/no_image.jpg","components/Home.js","components/Breadcrumb/Breadcrumb.styles.js","components/Breadcrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","movieId","clickable","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","value","button","Button","callback","onClick","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","console","log","API","movies","prev","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","Breadcrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","name","credit_id","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.930b9832.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --maxWidth: 1280px;\n    --white: #fff;\n    --lightGrey: #eee;\n    --medGrey: #353535;\n    --darkGrey: #1c1c1c;\n    --fontSuperBig: 2.5rem;\n    --fontBig: 1.5rem;\n    --fontMed: 1.2rem;\n    --fontSmall: 1rem;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Abel', sans-serif;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    \n    h1 {\n      font-size: 2rem;\n      font-weight: 600;\n      color: var(--white);\n    }\n\n    h3 {\n      font-size: 1.1rem;\n      font-weight: 600;\n    }\n\n    p {\n      font-size: 1rem;\n      color: var(--white);\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/react-movie-logo.42955eb6.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from 'styled-components';\n\n//what's this\nexport const Wrapper = styled.div`\n    background : var(--darkGrey);\n    padding: 0 20px;\n`;\nexport const Content = styled.div`\n  display: inline-flex;\n  align-items: center;\n  justify-content: space-between;\n  max-width: var(--maxWidth);\n  padding: 20px 0;\n  margin: 0 auto;\n`;\n\nexport const LogoImg = styled.img`\n  width: 200px;\n\n  @media screen and (max-width: 500px){\n    width: 150px;\n  }\n`;\nexport const TMDBLogoImg = styled.img`\nwidth: 100px;\n\n@media screen and (max-width: 500px){\n  width: 80px;\n}\n`;","import React from 'react' \nimport { Link } from 'react-router-dom'\n\nimport RMDBLogo from '../../images/react-movie-logo.svg'\nimport TMDBLogo from '../../images/tmdb_logo.svg'\n\nimport { Wrapper, Content, LogoImg, TMDBLogoImg} from './Header.styles'\n\nconst Header = () => (\n    <Wrapper>\n        <Content>\n            <Link to='/'>\n            <LogoImg src={RMDBLogo} alt='rmdb-logo' />\n            </Link>\n            <TMDBLogoImg src={TMDBLogo} alt='tmdb-logo' />\n        </Content>\n    </Wrapper>\n)\n\nexport default Header","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","//image is going full screen when it shouldn't\nimport styled from 'styled-components';\nexport const Wrapper = styled.div`\n  background: linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 41%,\n      rgba(0, 0, 0, 0.65) 100%\n    ),\n    url(${({ image }) => image}), var(--darkGrey);\n  background-size: 100%, cover;\n  background-position: center;\n  height: 600px;\n  position: relative;\n  animation: animateHeroImage 1s;\n\n  @keyframes animateHeroImage {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  padding: 20px;\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n`;\n\nexport const Text = styled.div`\n  z-index: 100;\n  max-width: 700px;\n  position: absolute;\n  bottom: 40px;\n  margin-right: 20px;\n  min-height: 100px;\n  color: var(--white);\n\n  h1 {\n    font-size: var(--fontSuperBig);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontBig);\n    }\n  }\n\n  p {\n    font-size: var(--fontMed);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontSmall);\n    }\n  }\n\n  @media screen and (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Wrapper, Content, Text } from './HeroImage.styles'\n\nconst HeroImage = ({image,title,text}) =>\n(\n    <Wrapper image={image}>\n        <Content>\n            <Text>\n                <h1>\n                    {title}\n                </h1>\n                <p>\n                    {text}\n                </p>\n            </Text>\n        </Content>\n    </Wrapper>\n)\nHeroImage.propTypes={\n    image: PropTypes.string,\n    title: PropTypes.string,\n    text: PropTypes.string\n}\n\nexport default HeroImage","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n  padding: 0 20px;\n\n  h1 {\n    color: var(--medGrey);\n\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 2rem;\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n//styles\nimport { Wrapper, Content } from './Grid.styles'\n\nconst Grid = ({header, children}) => (\n    <Wrapper>\n        <h1>\n            {header}\n        </h1>\n        <Content>\n            {children}\n        </Content>\n    </Wrapper>\n)\n\nGrid.propTypes = {\n  header: PropTypes.string\n}\n\nexport default Grid","import styled from 'styled-components';\n\nexport const Image = styled.img`\n  width: 100%;\n  max-width: 720px;\n  transition: all 0.3s;\n  object-fit: cover;\n  border-radius: 20px;\n  animation: animateThumb 0.5s;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  @keyframes animateThumb {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n//styles\nimport { Image } from './Thumb.styles'\n\nconst Thumb = ({image, movieId, clickable }) => (\n    <div>\n        {clickable ? (\n            <Link to={`/${movieId}`}>\n                <Image src={image} alt='movie-thumb' />\n            </Link>\n        ) : (\n        <Image src={image} alt = 'movie-thumb' />\n        )}\n    </div>\n)\n\nThumb.propTypes = {\n    image: PropTypes.string,\n    movieId: PropTypes.number,\n    clickable: PropTypes.bool\n}\n\nexport default Thumb","import { Spinner } from \"./Spinner.styles\";\nexport default Spinner","import styled from 'styled-components';\n\nexport const Spinner = styled.div`\n  border: 5px solid var(--lightGrey);\n  border-top: 5px solid var(--medGrey);\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 0.8s linear infinite;\n  margin: 20px auto;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 100px;\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  position: relative;\n  max-width: var(--maxWidth);\n  width: 100%;\n  height: 55px;\n  background: var(--medGrey);\n  margin: 0 auto;\n  border-radius: 40px;\n  color: var(--white);\n\n  img {\n    position: absolute;\n    left: 15px;\n    top: 14px;\n    width: 30px;\n  }\n\n  input {\n    font-size: var(--fontBig);\n    position: absolute;\n    left: 0;\n    margin: 8px 0;\n    padding: 0 0 0 60px;\n    border: 0;\n    width: 95%;\n    background: transparent;\n    height: 40px;\n    color: var(--white);\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n","import React,{useState, useEffect, useRef} from 'react'\nimport PropTypes from 'prop-types'\n//Image\nimport searchIcon from '../../images/search-icon.svg'\nimport { Wrapper,Content } from './SearchBar.styles'\n\nconst SearchBar = ({setSearchTerm}) => {\n    const [state,setState] = useState('')\n    const initial = useRef(true)\n\n    useEffect(() => {\n        if(initial.current){\n            initial.current = false\n            return;\n        }\n\n        const timer = setTimeout(()=>{\n            setSearchTerm(state)},500)\n        \n        return ()=> clearTimeout(timer)\n    },[setSearchTerm, state])\n\n    return (\n        <Wrapper>\n            <Content>\n                <img src={searchIcon} alt='search-icon' />\n                <input \n                type = 'text' \n                placeholder= 'Search Movie' \n                onChange = {event => setState(event.currentTarget.value)}\n                />\n            </Content>\n        </Wrapper>\n    )\n}\n\nSearchBar.propTypes = {\n    callback: PropTypes.func\n    //not sure about this\n}\n\nexport default SearchBar","import styled from 'styled-components';\n\nexport const Wrapper = styled.button`\n  display: block;\n  background: var(--darkGrey);\n  width: 25%;\n  min-width: 200px;\n  height: 60px;\n  border-radius: 30px;\n  color: var(--white);\n  border: 0;\n  font-size: var(--fontBig);\n  margin: 20px auto;\n  transition: all 0.3s;\n  outline: none;\n  cursor: pointer;\n\n  :hover {\n    opacity: 0.8;\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n//styles\nimport {Wrapper} from './Button.styles'\n\nconst Button = ({text, callback}) => (\n    <Wrapper type=\"button\" onClick={callback}>\n        {text}\n    </Wrapper>\n)\n\nButton.propTypes = {\n    text: PropTypes.string,\n    callback: PropTypes.func\n}\n\nexport default Button","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value })\n      })\n    ).json();\n\n    return rating;\n  }\n};\n\nexport default apiSettings;\n","// Convert time to hours and minutes\nexport const calcTime = time => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n// Convert a number to money formatting\nexport const convertMoney = money => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\n\nexport const isPersistedState = stateName => {\n  const sessionState = sessionStorage.getItem(stateName)\n  return sessionState && JSON.parse(sessionState)\n}\n","import { useState, useEffect, useRef } from \"react\"\nimport API from '../API'\n//helpers\nimport {isPersistedState} from '../helpers'\n\nconst initialState = {\npage: 0,\nresults: [],\ntotal_pages: 0,\ntotal_results: 0\n}\n\nexport const useHomeFetch = ()=> {\n    const [searchTerm, setSearchTerm] = useState('')\n    const [state, setState] = useState(initialState)\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n    const [isLoadingMore, setIsLoadingMore] = useState(false)\n\n    console.log(searchTerm);\n\n    const fetchMovies = async (page,searchTerm=\"\") => {\n        try {\n            setError(false)\n            setLoading(true)\n\n            const movies = await API.fetchMovies(searchTerm, page)\n            setState(prev => ({\n                ...movies, \n                results: \n                    page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n            }))\n        }catch(error){\n            setError(true)\n        }\n        setLoading(false)\n    }\n    //Initial render and search\n    useEffect(()=> {\n        if(!searchTerm){\n            const sessionState = isPersistedState('homeState')\n            \n            if(sessionState) {\n                console.log(\"Grabbing from session storage\");\n                setState(sessionState)\n                return\n            }\n        }\n        console.log(\"Grabbing from API\");\n        setState(initialState)\n        fetchMovies(1, searchTerm)\n    },[searchTerm])\n\n    //Load more\n    useEffect(() => {\n        if(!isLoadingMore) return\n\n        fetchMovies(state.page + 1, searchTerm)\n        setIsLoadingMore(false)\n    },[isLoadingMore, searchTerm, state.page])\n\n    //write to session storage\n    useEffect(()=>{\n        if(!searchTerm) sessionStorage.setItem('homeState', JSON.stringify(state))\n    },[searchTerm,state])\n\n    return {state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore}\n}","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import React from 'react'\n//config\nimport {POSTER_SIZE, BACKDROP_SIZE,IMAGE_BASE_URL} from '../config'\n//Components\nimport HeroImage from './HeroImage'\nimport Grid from './Grid'\nimport Thumb from './Thumb'\nimport Spinner from './Spinner'\nimport SearchBar from './SearchBar'\nimport Button from './Button'\n//Hook\nimport {useHomeFetch} from '../hooks/useHomeFetch'\n//image\nimport NoImage from '../images/no_image.jpg'\nconst Home = () =>\n{\n    const {state,loading,error,searchTerm, setSearchTerm, setIsLoadingMore} = useHomeFetch()\n    console.log(state);\n\n    if(error)\n    return <div>something went wrong...</div>\n    return (\n    <>\n    {!searchTerm && state.results[0] ? \n    <HeroImage \n    image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\n    title={state.results[0].original_title}\n    text={state.results[0].overview}\n    /> :null}\n    <SearchBar setSearchTerm={setSearchTerm}/>\n    <Grid header={searchTerm? 'Search Results':'Popular Movies'}>\n        {state.results.map(movie => (\n            <Thumb \n            key={movie.id}\n            clickable\n            image={\n                movie.poster_path\n                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\n                : NoImage\n            } \n            movieId={movie.id}\n            />\n        ))}\n    </Grid>\n    {loading && <Spinner />}\n    {state.page < state.total_pages && !loading && (\n        <Button text='Load More' callback={()=> setIsLoadingMore(true)}/>\n    )}\n    </>\n    )\n}\n\nexport default Home","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 70px;\n  background: var(--medGrey);\n  color: var(--white);\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: var(--maxWidth);\n  padding: 0 20px;\n\n  span {\n    font-size: var(--fontMed);\n    color: var(--white);\n    padding-right: 10px;\n\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontSmall);\n    }\n  }\n`;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\n//Styles\nimport { Wrapper, Content } from './Breadcrumb.styles'\n\nconst Breadcrumb = ({movieTitle}) => (\n    <Wrapper>\n        <Content>\n            <Link to='/'>\n                <span>Home</span>\n            </Link>\n            <span>|</span>\n            <span>{movieTitle}</span>\n        </Content>\n    </Wrapper>\n)\n\nBreadcrumb.propTypes = {\n    movieTitle: PropTypes.string\n}\n\nexport default Breadcrumb","import styled from 'styled-components';\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\n\nexport const Wrapper = styled.div`\n  background: ${({ backdrop }) =>\n    backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : '#000'};\n  background-size: cover;\n  background-position: center;\n  padding: 40px 20px;\n  animation: animateMovieInfo 1s;\n\n  @keyframes animateMovieInfo {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n  background: rgba(0, 0, 0, 0.7);\n  border-radius: 20px;\n\n  @media screen and (max-width: 768px) {\n    display: block;\n    max-height: none;\n  }\n`;\n\nexport const Text = styled.div`\n  width: 100%;\n  padding: 20px 40px;\n  color: var(--white);\n  overflow: hidden;\n\n  .rating-directors {\n    display: flex;\n    justify-content: flex-start;\n  }\n\n  .score {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 35px;\n    height: 35px;\n    background: #fff;\n    color: #000;\n    font-weight: 800;\n    border-radius: 50%;\n    margin: 0;\n  }\n\n  .director {\n    margin: 0 0 0 40px;\n\n    p {\n      margin: 0;\n    }\n  }\n\n  h1 {\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// Components\nimport Thumb from '../Thumb';\n// Config\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config';\n// Image\nimport NoImage from '../../images/no_image.jpg';\n// Styles\nimport { Wrapper, Content, Text } from './MovieInfo.styles';\n\nconst MovieInfo = ({ movie }) => (\n  <Wrapper backdrop={movie.backdrop_path}>\n    <Content>\n      <Thumb\n        image={\n          movie.poster_path\n            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\n            : NoImage\n        }\n        clickable={false}\n      />\n      <Text>\n        <h1>{movie.title}</h1>\n        <h3>PLOT</h3>\n        <p>{movie.overview}</p>\n\n        <div className='rating-directors'>\n          <div>\n            <h3>RATING</h3>\n            <div className='score'>{movie.vote_average}</div>\n          </div>\n          <div className='director'>\n            <h3>DIRECTOR{movie.directors.length > 1 ? 'S' : ''}</h3>\n            {movie.directors.map(director => (\n              <p key={director.credit_id}>{director.name}</p>\n            ))}\n          </div>\n        </div>\n      </Text>\n    </Content>\n  </Wrapper>\n);\n\nMovieInfo.propTypes = {\n  movie: PropTypes.object\n}\n\nexport default MovieInfo;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  min-height: 100px;\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  max-width: var(--maxWidth);\n  width: 100%;\n  margin: 0 auto;\n\n  .column {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: var(--medGrey);\n    border-radius: 20px;\n    margin: 0 20px;\n    flex: 1;\n\n    :first-child {\n      margin-left: 0;\n    }\n\n    :last-child {\n      margin-right: 0;\n    }\n  }\n\n  @media screen and (max-width: 768px) {\n    display: block;\n\n    .column {\n      margin: 20px 0;\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n//Helpers\nimport {calcTime, convertMoney} from '../../helpers'\n//Styles\nimport { Wrapper,Content } from './MovieInfoBar.styles'\n\nconst MovieInfoBar = ({time, budget, revenue}) => (\n    <Wrapper>\n        <Content>\n            <div className=\"column\">\n                <p>Runnning time: {calcTime(time)}</p>\n            </div>\n            <div className=\"column\">\n                <p>Budget: {convertMoney(budget)}</p>\n            </div>\n            <div className=\"column\">\n                <p>Revenue: {convertMoney(revenue)}</p>\n            </div>\n        </Content>\n    </Wrapper>\n)\n\nMovieInfoBar.propTypes = {\n    time: PropTypes.number,\n    budget: PropTypes.number,\n    revenue: PropTypes.number\n}\n\nexport default MovieInfoBar","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  color: var(--white);\n  background: var(--darkGrey);\n  border-radius: 20px;\n  padding: 5px;\n  text-align: center;\n\n  h3 {\n    margin: 10px 0 0 0;\n  }\n\n  p {\n    margin: 5px 0;\n  }\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n  border-radius: 15px;\n`;","import React from 'react'\nimport {Wrapper, Image} from './Actor.styles'\nimport PropTypes from 'prop-types'\n\nconst Actor = ({name,character, imageUrl}) => (\n    <Wrapper>\n        <Image src={imageUrl} alt='actor-thumb' />\n        <h3>{name}</h3>\n        <p>{character}</p>\n    </Wrapper>\n\n)\n\nActor.propTypes = {\n    name: PropTypes.string,\n    character: PropTypes.string,\n    imageUrl: PropTypes.string,\n}\n\nexport default Actor","import React from 'react'\nimport { useParams } from 'react-router-dom'\n//config\nimport {IMAGE_BASE_URL, POSTER_SIZE} from '../config'\n\n//Components\nimport Breadcrumb from './Breadcrumb'\nimport Grid from './Grid'\nimport Spinner from './Spinner'\nimport MovieInfo from './MovieInfo'\nimport MovieInfoBar from './MovieInfoBar'\nimport Actor from './Actor'\n\n//Hook\nimport { useMovieFetch } from '../hooks/useMovieFetch'\n//Image\nimport NoImage from '../images/no_image.jpg'\n\nconst Movie = () => {\n    const {movieId} = useParams()\n\n    const {state: movie, loading, error } = useMovieFetch(movieId)\n    if(loading) return <Spinner />\n    if(error) return <div>Something went wrong</div>\n    return (\n        <>\n        <Breadcrumb movieTitle={movie.original_title} />\n        <MovieInfo movie={movie} />\n        <MovieInfoBar time={movie.runtime} budget={movie.budget} revenue={movie.revenue} />\n        <Grid header='Actors'>\n            {movie.actors.map(actor => (\n                <Actor \n                key={actor.credit_id}\n                name={actor.name}\n                character={actor.character}\n                imageUrl={actor.profile_path\n                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\n                : NoImage\n            }/>\n            ))}\n        </Grid>\n        </>\n    )\n}\nexport default Movie","import { async } from 'q'\nimport { useState, useEffect,useCallback } from 'react'\nimport API from '../API'\n//helpers\nimport {isPersistedState} from '../helpers'\n\nexport const useMovieFetch = movieId =>\n{\n    const [state, setState] = useState({})\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(false)\n\n    useEffect(() => {\n        const fetchMovie = async ()=> {\n            try{\n                setLoading(true)\n                setError(false)\n                const movie = await API.fetchMovie(movieId)\n                const credits = await API.fetchCredits(movieId)\n                //Get directors only\n                const directors = credits.crew.filter(\n                    member => member.job === 'Director'\n                )\n                setState({\n                    ...movie,\n                    actors: credits.cast,\n                    directors\n                })\n                setLoading(false)\n            }catch(error){setError(true)}\n            }\n            const sessionState = isPersistedState(movieId)\n            if(sessionState){\n                setState(sessionState)\n                setLoading(false)\n                return\n            }\n\n            fetchMovie()\n    },[movieId])\n    //write to session storage\n    useEffect(()=>{\n        sessionStorage.setItem(movieId,JSON.stringify(state))\n    },[movieId, state])\n    return {state, loading, error}\n}","import React from 'react'\n\nconst NotFound = () => <div>NotFound</div>\nexport default NotFound","import React from 'react';\n//Routing\nimport { BrowserRouter as Router, Routes, Route} from 'react-router-dom';\nimport { GlobalStyle } from './GlobalStyle';\n\nimport Header from './components/Header'\nimport Home from './components/Home'\nimport Movie from './components/Movie'\nimport NotFound from './components/NotFound';\n\nconst App = () => (\n    <Router>\n      <Header />\n      <Routes>\n        <Route path='/' element={<Home />} />\n        <Route path='/:movieId' element={<Movie />} />\n        <Route path='/*' element={<NotFound />} />\n      </Routes>\n      <GlobalStyle/>\n    </Router>\n  );\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}